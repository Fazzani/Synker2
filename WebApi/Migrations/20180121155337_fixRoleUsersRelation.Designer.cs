// <auto-generated />
using hfa.Synker.Service.Entities.Auth;
using hfa.Synker.Service.Entities.Playlists;
using hfa.Synker.Services.Dal;
using hfa.Synker.Services.Entities.Messages;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PlaylistManager.Entities;
using System;
using System.Collections.Generic;

namespace hfa.WebApi.Migrations
{
    [DbContext(typeof(SynkerDbContext))]
    [Migration("20180121155337_fixRoleUsersRelation")]
    partial class fixRoleUsersRelation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommandText")
                        .IsRequired();

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<byte>("Interpreter");

                    b.Property<int>("Priority");

                    b.Property<int>("ReplayCount");

                    b.Property<byte>("Status");

                    b.Property<DateTime?>("TreatedDate");

                    b.Property<DateTime?>("TreatingDate");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Command");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.ConnectionState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccessToken");

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Disabled");

                    b.Property<DateTime>("LastConnection");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.HasKey("Id");

                    b.ToTable("ConnectionState");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDay");

                    b.Property<int>("ConnectionStateId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<byte>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("Photo");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionStateId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("FirstName", "LastName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Playlists.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("Favorite");

                    b.Property<string>("Freindlyname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<JsonObject<List<TvgMedia>>>("Medias");

                    b.Property<byte>("Status");

                    b.Property<JsonObject<Dictionary<string, string>>>("Tags");

                    b.Property<string>("TvgSitesString")
                        .IsRequired();

                    b.Property<Guid>("UniqueId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UniqueId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Playlist");
                });

            modelBuilder.Entity("hfa.Synker.Services.Entities.Messages.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<int>("MessageType");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TimeStamp");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.Command", b =>
                {
                    b.HasOne("hfa.Synker.Service.Entities.Auth.User", "User")
                        .WithMany("Commands")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.Role", b =>
                {
                    b.HasOne("hfa.Synker.Service.Entities.Auth.User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Auth.User", b =>
                {
                    b.HasOne("hfa.Synker.Service.Entities.Auth.ConnectionState", "ConnectionState")
                        .WithMany()
                        .HasForeignKey("ConnectionStateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("hfa.Synker.Service.Entities.Playlists.Playlist", b =>
                {
                    b.HasOne("hfa.Synker.Service.Entities.Auth.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("hfa.Synker.Service.Entities.Playlists.SynkConfig", "SynkConfig", b1 =>
                        {
                            b1.Property<int>("PlaylistId");

                            b1.Property<bool>("CleanName");

                            b1.Property<int?>("NotifcationTypeInsertedMedia");

                            b1.Property<string>("Provider");

                            b1.Property<bool>("SynkEpg");

                            b1.Property<byte>("SynkGroup");

                            b1.Property<bool>("SynkLogos");

                            b1.Property<string>("Url");

                            b1.ToTable("Playlist");

                            b1.HasOne("hfa.Synker.Service.Entities.Playlists.Playlist")
                                .WithOne("SynkConfig")
                                .HasForeignKey("hfa.Synker.Service.Entities.Playlists.SynkConfig", "PlaylistId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("hfa.Synker.Services.Entities.Messages.Message", b =>
                {
                    b.HasOne("hfa.Synker.Service.Entities.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
