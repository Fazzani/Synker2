<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.0</TargetFramework>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>
    <AssetTargetFallback>$(AssetTargetFallback);portable-net45+win8+wp8+wpa81;</AssetTargetFallback>
    <IsPackable>false</IsPackable>
    <AssemblyName>hfa.WebClient</AssemblyName>
    <RootNamespace>WebClient</RootNamespace>
    <UserSecretsId>f934f0be-ac10-4dd6-b82f-d7aecb08f04b</UserSecretsId>
    <GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
    <LangVersion>latest</LangVersion>
    <DockerComposeProjectPath>..\docker-compose.dcproj</DockerComposeProjectPath>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.All" Version="2.0.0" />
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="2.0.0" />
    <PackageReference Include="Serilog.AspNetCore" Version="2.1.1" />
    <PackageReference Include="Serilog.Settings.Configuration" Version="2.5.0" />
    <PackageReference Include="Serilog.Sinks.Console" Version="3.1.1" />
    <PackageReference Include="Serilog.Sinks.File" Version="4.0.0" />
  </ItemGroup>
  <ItemGroup>
    <DotNetCliToolReference Include="Microsoft.DotNet.Watcher.Tools" Version="2.0.0" />
    <DotNetCliToolReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Tools" Version="2.0.0" />
    <DotNetCliToolReference Include="Microsoft.Extensions.SecretManager.Tools" Version="2.0.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- Files not to publish (note that the 'dist' subfolders are re-added below) -->
    <Content Remove="ClientApp\**" />
  </ItemGroup>
  <!--<ItemGroup>
    <Compile Remove="node_modules\**" />
    <Content Remove="node_modules\**" />
    <EmbeddedResource Remove="node_modules\**" />
    <None Remove="node_modules\**" /> 
  </ItemGroup>-->

  <ItemGroup>
    <None Remove="ClientApp\app\app.module.routing.ts" />
    <None Remove="ClientApp\app\components\admin\admin.component.ts" />
    <None Remove="ClientApp\app\components\admin\dashboard\admin.dashboard.component.ts" />
    <None Remove="ClientApp\app\components\animations.ts" />
    <None Remove="ClientApp\app\components\dialogs\auth\LoginDialog.ts" />
    <None Remove="ClientApp\app\components\dialogs\auth\RegisterDialog.ts" />
    <None Remove="ClientApp\app\components\dialogs\playlistBulkUpdate\playlistBulkUpdate.ts" />
    <None Remove="ClientApp\app\components\dialogs\playlistTvgSites\PlaylistTvgSitesDialog.ts" />
    <None Remove="ClientApp\app\components\playlist\playlist.update.dialog.ts" />
    <None Remove="ClientApp\app\infrastructure\DefaultHttpInterceptor.ts" />
    <None Remove="ClientApp\app\infrastructure\JwtInterceptor.ts" />
    <None Remove="ClientApp\app\pipes\enumKey.pipe.ts" />
    <None Remove="ClientApp\app\services\auth\auth.service.ts" />
    <None Remove="ClientApp\app\services\auth\loginRouteGuard.service.ts" />
    <None Remove="ClientApp\app\services\common\common.service.spec.ts" />
    <None Remove="ClientApp\app\services\common\common.service.ts" />
    <None Remove="ClientApp\app\services\notification\notification.service.ts" />
    <None Remove="ClientApp\app\types\auth.type.ts" />
    <None Remove="ClientApp\app\types\elasticQuery.type.ts" />
    <None Remove="ClientApp\app\types\matchTvgPostModel.ts" />
    <None Remove="ClientApp\app\types\picon.type.ts" />
    <None Remove="ClientApp\app\types\xmltv.type.ts" />
    <None Remove="ClientApp\app\types\xtream.type.ts" />
    <None Remove="ClientApp\app\variables.ts" />
  </ItemGroup>

  <ItemGroup>
    <Content Include=".well-known\json.json" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="ClientApp\app\directives\" />
    <Folder Include="ClientApp\app\services\xmltv\" />
    <Folder Include="wwwroot\assets\images\" />
    <Folder Include="wwwroot\dist\" />
  </ItemGroup>

  <ItemGroup>
    <TypeScriptCompile Include="ClientApp\app\app.module.routing.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\admin\admin.component.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\admin\dashboard\admin.dashboard.component.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\animations.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\dialogs\auth\LoginDialog.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\dialogs\auth\RegisterDialog.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\dialogs\playlistBulkUpdate\playlistBulkUpdate.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\dialogs\playlistTvgSites\PlaylistTvgSitesDialog.ts" />
    <TypeScriptCompile Include="ClientApp\app\components\dialogs\playlistUpdate\playlist.update.dialog.ts" />
    <TypeScriptCompile Include="ClientApp\app\infrastructure\DefaultHttpInterceptor.ts" />
    <TypeScriptCompile Include="ClientApp\app\infrastructure\JwtInterceptor.ts" />
    <TypeScriptCompile Include="ClientApp\app\pipes\enumKey.pipe.ts" />
    <TypeScriptCompile Include="ClientApp\app\pipes\search.pipe.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\auth\auth.service.spec.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\auth\auth.service.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\auth\loginRouteGuard.service.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\base\base.service.spec.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\common\common.service.spec.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\common\common.service.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\notification\notification.service.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\tvgmedia\tvgmedia.service.spec.ts" />
    <TypeScriptCompile Include="ClientApp\app\services\epg\epg.service.spec.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\common.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\matchTvgPostModel.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\media.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\auth.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\elasticQuery.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\picon.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\xmltv.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\types\xtream.type.ts" />
    <TypeScriptCompile Include="ClientApp\app\variables.ts" />
  </ItemGroup>

  <ItemGroup>
    <Content Update="wwwroot\favicon.ico">
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
    </Content>
  </ItemGroup>

  <Target Name="DebugRunWebpack" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('wwwroot\dist') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />

    <!-- In development, the dist files won't exist on the first run or when cloning to
         a different machine, so rebuild them if not already present. -->
    <Message Importance="high" Text="Performing first-run Webpack build..." />
    <Exec Command="node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js" />
    <Exec Command="node node_modules/webpack/bin/webpack.js" />
  </Target>

  <Target Name="PublishRunWebpack" AfterTargets="ComputeFilesToPublish">
    <!-- As part of publishing, ensure the JS resources are freshly built in production mode -->
    <Exec Command="npm cache clean" />
    <!--<Exec Command="rm -rf node_modules" />-->
    <Exec Command="yarn global add node-gyp" />
    <Exec Command="yarn install --production" />
    <Exec Command="npm uninstall --save node-sass" />
    <Exec Command="npm install --save node-sass --production" />
    <!--<Exec Command="npm i rxjs" />
    <Exec Command="npm cache clean" />-->
    <Exec Command="npm -v" />
    <Exec Command="node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js --env.prod" />
    <Exec Command="node node_modules/webpack/bin/webpack.js --env.prod" />

    <!-- Include the newly-built files in the publish output -->
    <ItemGroup>
      <DistFiles Include="wwwroot\dist\**; ClientApp\dist\**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>